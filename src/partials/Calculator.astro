---
import { Image } from 'astro:assets';
import { reader } from 'src/reader';
import Container from '../shared/ui/Container.astro';
import Section from '../shared/ui/Section.astro';

const collection = await reader.singletons.form.read();

// if (Astro.request.method === 'POST') {
// 	try {
// 		const data = await Astro.request.formData();

// 		const phone = data.get('phone');
// 		// Do something with the data
// 	} catch (error) {
// 		if (error instanceof Error) {
// 			console.error(error.message);
// 		}
// 	}
// }
---

{
	collection && (
		<Section>
			<Container className=' px-4 md:px-8 lg:px-12 items-center w-full max-w-[1400px]'>
				<div class='w-full p-4 md:p-8 lg:p-12 flex flex-col md:flex-row gap-8 md:gap-12 lg:gap-16 shadow-lg rounded-2xl bg-secondary-bg/15 border-2 border-secondary-bg'>
					<form
						method='post'
						enctype='application/x-www-form-urlencoded'
						id='contactForm'
						class='gform flex flex-col gap-8 md:gap-12 '>
						<h2 class='text-3xl md:text-4xl'>{collection.titel}</h2>
						<div class='flex flex-col gap-4 md:gap-8'>
							{collection.fields.map(field => {
								switch (field.type) {
									case 'text':
										return (
											<div class='maskedInput flex flex-col'>
												<label>{field.lable}</label>
												<input
													class=' p-4 md:p-5 rounded-2xl border border-accent-secondary'
													type='text'
													value=''
													name={field.form}
													id='maskedInput'
													required
													placeholder={field.placeholder}
												/>
											</div>
										);
									case 'number':
										return (
											<div class='flex flex-col'>
												<label>{field.lable}</label>
												<input
													required
													name={field.form}
													class='appearance-none p-4 md:p-5 rounded-2xl border border-accent-secondary'
													type='number'
													value=''
													placeholder='Например: 35'
												/>
											</div>
										);
									case 'select':
										return (
											<div class='flex flex-col'>
												<label>{field.lable}</label>
												<select
													required
													name={field.form}
													class='bg-primary-bg appearance-none p-4 md:p-5 rounded-2xl border border-accent-secondary text-gray'>
													<option
														value=''
														disabled
														selected
														class='bg-primary-bg text-gray opacity-35'>
														Выберите
													</option>
													{field.options?.map(
														(option: {
															title: string;
															value: string;
														}) => (
															<option
																class='bg-primary-bg'
																value={option.value}>
																{option.title}
															</option>
														)
													)}
												</select>
											</div>
										);
									default:
										return null;
								}
							})}
						</div>
						<button
							type='submit'
							class='text-white button bg-accent rounded-full px-8 py-4 hover:bg-accent-secondary'>
							{collection.buttonLable}
						</button>
						<div
							class='hidden'
							id='thankyou_message'>
							<h2 class='flex flex-col'>
								<em class='text bold'>Спасибо что выбрали нас!</em> Наши сотрудники
								свяжутся с вами в ближайшее время.
							</h2>
						</div>
					</form>
					<div class='w-full md:w-1/2 min-h-full shrink-0 relative'>
						<Image
							class='object-contain z-40 md:object-center h-[120%] w-[110%] -top-[15%] absolute'
							src={collection.img}
							height={'1200'}
							width={'800'}
							alt={collection.titel}
						/>
					</div>
				</div>
			</Container>
		</Section>
	)
}

<script is:inline>
	const responseContainer = document.getElementById('thankyou_message');
	document.getElementById('contactForm').addEventListener('submit', function (e) {
		e.preventDefault(); // Предотвращаем стандартную отправку формы

		const formData = new FormData(this); // Собираем данные формы
		console.log(formData);
		// Находим кнопку отправки в форме
		const submitButton = this.querySelector('button[type="submit"], input[type="submit"]');
		// Отключаем кнопку, чтобы предотвратить повторную отправку
		if (submitButton) {
			submitButton.disabled = true;
		}

		// Отправляем данные формы асинхронно
		fetch('../sendmail.php', {
			method: 'POST',
			body: formData,
		})
			.then(() => (this.disabled = true))
			.then(() => {
				// Обрабатываем ответ от сервера
				// responseContainer.textContent = 'Ваше сообщение отправлено!';
				responseContainer.classList.remove('hidden');
				responseContainer.style = 'color: green;';
				// alert(data); // Можно заменить на более красивое отображение сообщения
				this.reset();
			})
			.catch(error => {
				console.error('Error:', error);
				responseContainer.textContent =
					'Произошла ошибка. Ваше сообщение не было отправлено! Рекомендуем позвонить нам по телефону.';
				responseContainer.classList.remove('hidden');
				responseContainer.style = 'color: red;';
				alert('Произошла ошибка при отправке формы'); // Можно заменить на более красивое отображение сообщения об ошибке
				// Включаем кнопку обратно, чтобы пользователь мог попробовать отправить форму снова
				if (submitButton) {
					submitButton.disabled = false;
				}
			});
	});
</script>
<style>
	select:required:invalid {
		color: #9e9e9e;
	}
	option[value=''][disabled] {
		display: none;
	}
	option {
		color: #000;
	}
	input[type='number']::-webkit-outer-spin-button,
	input[type='number']::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	input[type='number'] {
		-moz-appearance: textfield;
	}
	input[type='number']:hover,
	input[type='number']:focus {
		-moz-appearance: number-input;
	}
</style>
